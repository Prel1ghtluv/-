import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

# Главное окно приложения
class MainWindow(tk.Tk):
    def init(self):
        super().init()
        self.title("Вход или Регистрация")
        self.geometry("300x300")

        # Кнопки
        self.btn_login = tk.Button(self, text="Войти", command=self.show_login_window)
        self.btn_login.pack(side=tk.LEFT, padx=50, pady=50)
        self.btn_register = tk.Button(self, text="Регистрация", command=self.show_register_window)
        self.btn_register.pack(side=tk.RIGHT, padx=50, pady=50)

    # Функция показа окна входа
    def show_login_window(self):
        self.destroy()  # Закрываем окно выбора
        LoginWindow()  # Открываем окно входа

    # Функция показа окна регистрации
    def show_register_window(self):
        self.destroy()  # Закрываем окно выбора
        RegisterWindow()  # Открываем окно регистрации

# Окно входа
class LoginWindow(tk.Tk):
    def init(self):
        super().init()
        self.title("Вход")
        self.geometry("300x200")

        # Метки и поля ввода
        self.lbl_name = tk.Label(self, text="ФИО:")
        self.lbl_name.grid(row=0, column=0)
        self.ent_name = tk.Entry(self)
        self.ent_name.grid(row=0, column=1)

        self.lbl_group = tk.Label(self, text="Номер группы:")
        self.lbl_group.grid(row=1, column=0)
        self.ent_group = tk.Entry(self)
        self.ent_group.grid(row=1, column=1)

        # Кнопки
        self.btn_login = tk.Button(self, text="Войти", command=self.login)
        self.btn_login.grid(row=2, column=0)
        self.btn_cancel = tk.Button(self, text="Отмена", command=self.cancel)
        self.btn_cancel.grid(row=2, column=1)

        # Флаг, указывающий, что окно уже было открыто
        self.opened = False

    # Функция входа
    def login(self):
        name = self.ent_name.get()
        group = self.ent_group.get()

        if name == "" or group == "":
            messagebox.showerror("Ошибка", "Заполните все поля!")
            return

        with open("logins.txt", "r") as f:
            lines = f.readlines()

        for line in lines:
            line = line.strip()
            line_name, line_group = line.split(",")

            if name == line_name and group == line_group:
                show_profile_window(name, group)  # Исправлено
                return

        messagebox.showerror("Ошибка", "Неверные данные для входа!")

    # Функция отмены входа
    def cancel(self):
        self.destroy()  # Закрываем окно входа
        MainWindow()  # Открываем окно выбора

# Окно регистрации
class RegisterWindow(tk.Tk):
    def init(self):
        super().init()
        self.title("Регистрация")
        self.geometry("400x300")

        # Метки и поля ввода
        self.lbl_name = tk.Label(self, text="ФИО:")
        self.lbl_name.grid(row=0, column=0)
        self.ent_name = tk.Entry(self)
        self.ent_name.grid(row=0, column=1)

        self.lbl_group = tk.Label(self, text="Номер группы:")
        self.lbl_group.grid(row=1, column=0)
        self.ent_group = tk.Entry(self)
        self.ent_group.grid(row=1, column=1)

        # Кнопки
        self.btn_register = tk.Button(self, text="Зарегистрироваться", command=self.register)
        self.btn_register.grid(row=2, column=0)
        self.btn_cancel = tk.Button(self, text="Отмена", command=self.cancel)
        self.btn_cancel.grid(
row=2, column=1)

    # Функция регистрации
    def register(self):
        name = self.ent_name.get()
        group = self.ent_group.get()

        # Проверка формата ФИО
        name_parts = name.split()
        if len(name_parts) != 3:
            messagebox.showerror("Ошибка", "ФИО должно содержать три части: фамилию, имя и отчество.")
            return
        for part in name_parts:
            if not part[0].isupper():
                messagebox.showerror("Ошибка", "Все слова в ФИО должны начинаться с заглавной буквы.")